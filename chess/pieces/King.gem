class King :: Piece {
    init(pos, color, board) {
        super.init(pos, color, board);
        this.setImage("king");
        this.type = "king";
    }

    getMoves() {
        var moves = [];
        var dirs = [[1,0], [-1,0], [0,1], [0,-1], [1,1], [-1,1], [1,-1], [-1,-1]];
        var i = 0;
        while (i < dirs.length()) {
            var x = this.pos[0] + dirs[i][0];
            var y = this.pos[1] + dirs[i][1];
            if (this.inBounds(x, y) and (this.isEmpty(x, y) or this.isEnemy(x, y))) {
                moves.append([x, y]);
            }
            i = i + 1;
        }
        // TODO: castling
        return moves;
    }

    isInCheck(){
        for(var i = 0; i < 8; i = i + 1){
            for(var j = 0; j < 8; j = j + 1){
                var piece = this.board.get(i, j);
                if(!this.isEmpty(i, j) and this.isEnemy(i, j)){
                    var moves = piece.getMoves();
                    for(var x = 0; x < moves.length(); x = x + 1){
                        if(moves[x][0] == this.pos[0] and moves[x][1] == this.pos[1]) return true;
                    }
                }
            }
        }
        return false;
    }

    isInMate(){
        for(var i = 0; i < 8; i = i + 1){
            for(var j = 0; j < 8; j = j + 1){
                var piece = this.board.get(i, j);
                if(!this.isEmpty(i, j) and !this.isEnemy(i, j)){
                    if(piece.getLegalMoves().length() != 0){
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
